name: "Armbian Build CI"
on:
  schedule:
    - cron: '30 2 * * 2'
    
  workflow_dispatch:
    inputs:

      DESKTOP:
        type: choice
        description: "Desktop environment"
        options:
        - minimal
        - server
        - gnome
        - budgie
        - cinnamon
        - i3-wm
        - kde-neon
        - kde-plasma
        - mate
        - xfce
        - xmonad
        default: 'server'

      DOCKER:
        type: choice
        description: "Build type: yes = Docker, no = Actions"
        required: false
        options: [ 'yes', 'no' ]
        default: 'no'
      
      NIGHTLY:
        description: "Build type: yes = Nightly, no = Stable"
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      ROOTFS:
        type: choice
        description: "Root filesystem"
        options:
        - ext4
        - btrfs
        default: 'ext4'

permissions:
  contents: write
  pages: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  RELEASE: "plucky noble bookworm trixie"

jobs:
  # ====================================================================
  # JOB 0: Prepare Build Parameters and Matrix 
  # ====================================================================
  Prepare_Build:
    name: "Prepare Build Parameters & Matrix"
    runs-on: ubuntu-latest
    outputs:
      DESKTOP: ${{ github.event_name == 'schedule' && '["minimal", "server"]' || format('["{0}"]', inputs.DESKTOP) }}
      DESKTOP_DISPLAY: ${{ github.event_name == 'schedule' && 'minimal, server' || inputs.DESKTOP }}
      NIGHTLY: ${{ github.event_name == 'schedule' && 'no' || inputs.NIGHTLY }}
      DOCKER: ${{ github.event_name == 'schedule' && 'no' || inputs.DOCKER }}
      ROOTFS: ${{ github.event_name == 'schedule' && 'ext4' || inputs.ROOTFS }}
      RELEASE: ${{ steps.set_matrix.outputs.RELEASE }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: "Log effective parameters"
        run: |
          echo "--- Build Parameters ---"
          echo "Trigger: ${{ github.event_name }}"
          echo "Desktop: ${{ github.event_name == 'schedule' && '[\"minimal\", \"server\"]' || format('[\"{0}\"]', inputs.DESKTOP) }}"
          echo "NIGHTLY: ${{ github.event_name == 'schedule' && 'no' || inputs.NIGHTLY }}"
          echo "DOCKER: ${{ github.event_name == 'schedule' && 'no' || inputs.DOCKER }}"
          echo "ROOTFS: ${{ github.event_name == 'schedule' && 'ext4' || inputs.ROOTFS }}"

      # <-- ADDED: Get version from the build repo once.
      - name: "Checkout Build System to get Version"
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          path: build

      - name: "Get Armbian Version"
        id: get_version
        run: |
          VERSION=$(cat build/VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Armbian version for this run: ${VERSION}"
      
      - name: "Set and Log Release Matrix"
        id: set_matrix
        run: |
          JSON_RELEASE=$(echo "${{ env.RELEASE }}" | jq -c -R 'split(" ") | map(select(. != ""))')
          echo "RELEASE=${JSON_RELEASE}" >> $GITHUB_OUTPUT
          echo "--- Release Matrix Generated ---"
          echo "Matrix: ${JSON_RELEASE}"

  # ====================================================================
  # JOB 1: Build Kernel Packages
  # ====================================================================
  Build_Kernel:
    needs: Prepare_Build
    name: "Build Kernel [${{ matrix.BOARD }} ${{ matrix.BRANCH }}]"
    runs-on: ubuntu-22.04
    timeout-minutes: 200
    strategy:
      fail-fast: false
      matrix:
        BOARD: [lemonpi, som3588-cat, ufi001c]
        BRANCH: [edge, vendor]

    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source" 
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Setup Kernel Build Environment"
        shell: bash
        run: |
          # Aggressively clean up the runner to free up disk space for the build.
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge && sudo -E apt-get -qq clean
          sudo dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge || true

          # Automatically sync rockchip64-6.16 patches to all existing rockchip64-6.* directories under build
          for verdir in ./build/patch/kernel/archive/rockchip64-6.*; do
            if [ -d "$verdir" ]; then
              target=$(basename "$verdir")
              if [ ! -d "./build/patch/kernel/archive/$target" ]; then
                mkdir -p "./build/patch/kernel/archive/$target"
              fi
              cp -rf ./custom/Addboard/patch/kernel/archive/rockchip64-6.16/* "./build/patch/kernel/archive/$target/"
              echo "rockchip64-6.16 patches have been synced to $target"
            fi
          done
          
          # Prepare custom build files by copying them into the build system directory.
          mkdir -p ./build/userpatches
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches

      - name: "Compile Kernel [${{ matrix.BOARD }} ${{ matrix.BRANCH }}]"
        shell: bash
        run: |
          cd ./build
          # Invoke the Armbian compile script with parameters for a kernel-only build.
          ./compile.sh \
            REVISION="${{ needs.Prepare_Build.outputs.VERSION }}" \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ matrix.BRANCH }}" \
            RELEASE="bookworm" \
            KERNEL_CONFIGURE="no" \
            BUILD_DESKTOP="no" \
            BUILD_MINIMAL="yes" \
            SHARE_LOG="yes" \
            BETA="${{ needs.Prepare_Build.outputs.NIGHTLY }}" \
            PREFER_DOCKER="${{ needs.Prepare_Build.outputs.DOCKER }}" \
            EXPERT="yes" \
            VENDOR=Armbian

      - name: "Upload Kernel Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: build/output/debs/*.deb
          if-no-files-found: error

  # ====================================================================
  # JOB 2: Build Armbian Image
  # ====================================================================
  Build_Image:
    name: "Build Image [${{ matrix.BOARD }} ${{ matrix.BRANCH }} ${{ matrix.RELEASE }} ${{ matrix.DESKTOP }}]"
    needs: [Prepare_Build, Build_Kernel]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BOARD: [ aml-s9xx-box ]
        BRANCH: [ current ]
        RELEASE: ${{ fromJson(needs.Prepare_Build.outputs.RELEASE) }}
        DESKTOP: ${{ fromJson(needs.Prepare_Build.outputs.DESKTOP) }}
        
    steps:
      - name: "Checkout Board Source"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Checkout Build System"
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build

      - name: "Checkout OS Source"
        uses: actions/checkout@v4
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os

      - name: "Download Kernel Artifact"
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs-${{ matrix.BOARD }}-${{ matrix.BRANCH }}
          path: ./prebuilt-kernel-debs

      - name: "Setup Image Build Environment"
        shell: bash
        run: |
          # Clean up the runner to ensure sufficient disk space.
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge && sudo -E apt-get -qq clean
          sudo apt-get install -y mkbootimg android-sdk-libsparse-utils
          
          # Set build flags as environment variables based on the DESKTOP type.
          if [[ "${{ matrix.DESKTOP }}" == "minimal" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="yes"" >> $GITHUB_ENV
          elif [[ "${{ matrix.DESKTOP }}" == "server" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
          else
            echo "BUILD_DESKTOP="yes"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT="${{ matrix.DESKTOP }}"" >> $GITHUB_ENV
            echo "DESKTOP_APPGROUPS_SELECTED="browsers"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"" >> $GITHUB_ENV
          fi

          # Automatically sync rockchip64-6.16 patches to all existing rockchip64-6.* directories under build
          for verdir in ./build/patch/kernel/archive/rockchip64-6.*; do
            if [ -d "$verdir" ]; then
              target=$(basename "$verdir")
              if [ ! -d "./build/patch/kernel/archive/$target" ]; then
                mkdir -p "./build/patch/kernel/archive/$target"
              fi
              cp -rf ./custom/Addboard/patch/kernel/archive/rockchip64-6.16/* "./build/patch/kernel/archive/$target/"
              echo "rockchip64-6.16 patches have been synced to $target"
            fi
          done
          
          # Prepare build environment with userpatches and the pre-built kernel debs.
          mkdir -p ./build/userpatches ./build/output/debs
          cp -rf ./custom/Addboard/* ./build
          cp -rf ./os/userpatches/* ./build/userpatches
          cp -v ./prebuilt-kernel-debs/*.deb ./build/output/debs/
          
      - name: "Import GPG Key for Signing Images"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: "Compile Image [${{ matrix.BOARD }} ${{ matrix.RELEASE }}]"
        shell: bash
        run: |
          cd ./build
          ./compile.sh \
            REVISION="${{ needs.Prepare_Build.outputs.VERSION }}" \
            BOARD="${{ matrix.BOARD }}" \
            BRANCH="${{ matrix.BRANCH }}" \
            RELEASE="${{ matrix.RELEASE }}" \
            KERNEL_CONFIGURE="no" \
            kernel="no" \
            BUILD_DESKTOP="${{ env.BUILD_DESKTOP }}" \
            BUILD_MINIMAL="${{ env.BUILD_MINIMAL }}" \
            DESKTOP_ENVIRONMENT="${{ env.DESKTOP_ENVIRONMENT }}" \
            DESKTOP_APPGROUPS_SELECTED="${{ env.DESKTOP_APPGROUPS_SELECTED }}" \
            DESKTOP_ENVIRONMENT_CONFIG_NAME="${{ env.DESKTOP_ENVIRONMENT_CONFIG_NAME }}" \
            SHARE_LOG="yes" \
            BETA="${{ needs.Prepare_Build.outputs.NIGHTLY }}" \
            PREFER_DOCKER="${{ needs.Prepare_Build.outputs.DOCKER }}" \
            ROOTFS_TYPE="${{ needs.Prepare_Build.outputs.ROOTFS }}" \
            NETWORKING_STACK="network-manager" \
            EXPERT="yes" \
            VENDOR=Armbian \
            COMPRESS_OUTPUTIMAGE="sha,gpg,xz"

      - name: "Package UFI001C Flasher"
        if: matrix.BOARD == 'ufi001c'
        shell: bash
        run: |
          cd ./build
          chmod +x ./extensions/package_ufi001c_flasher.sh
          sudo ./extensions/package_ufi001c_flasher.sh

      - name: "Upload Image Artifact"
        uses: actions/upload-artifact@v4
        with:
          # A unique artifact name for each image, fully specified by the matrix.
          name: armbian-image-${{ matrix.BOARD }}-${{ matrix.BRANCH }}-${{ matrix.RELEASE }}-${{ matrix.DESKTOP }}
          path: build/output/images/*
          if-no-files-found: error
          
      - name: "Record Successful Image Build Info"
        shell: bash
        run: |
          # Create a marker file to track which board/branch combinations succeeded.
          echo "${{ matrix.BOARD }},${{ matrix.BRANCH }},${{ matrix.RELEASE }},${{ matrix.DESKTOP }}" > matrix-info.txt

      - name: "Upload Matrix Info Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: matrix-info-${{ matrix.BOARD }}-${{ matrix.BRANCH }}-${{ matrix.RELEASE }}-${{ matrix.DESKTOP }}
          path: matrix-info.txt

  # ====================================================================
  # JOB 3: Publish GitHub Release
  # ====================================================================
  Publish_Release:
    name: "Publish GitHub Release"
    runs-on: ubuntu-latest
    needs: [Prepare_Build, Build_Image]
    if: always() 

    steps:
      - name: "Maximize Runner Free Space"
        shell: bash
        run: |
          sudo apt-get update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq autoremove --purge && sudo -E apt-get -qq clean
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /usr/local/lib/android

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 
          
      - name: "Download All Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: "Rename Kernel DEBs for Release"
        shell: bash
        run: |
          # Simplify kernel .deb filenames for a cleaner release page.
          set -eo pipefail
          echo "--- Simplifying linux-*.deb filenames for release ---"
          find artifacts/kernel-debs-*/ -type f -name 'linux-*.deb' | while read -r filepath; do
            dir=$(dirname "$filepath"); old_name=$(basename "$filepath")
            new_name=$(echo "$old_name" | sed -E 's/^(.*__[0-9.]+).*\.deb$/\1.deb/')
            if [[ "$old_name" != "$new_name" ]]; then mv -v "$filepath" "$dir/$new_name"; fi
          done
          echo "--- Final list of kernel packages after simplification ---"
          ls -R artifacts/kernel-debs-*/
          
      - name: "Generate Release Body"
        id: generate_body
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: "Armbian_V${{ needs.Prepare_Build.outputs.VERSION }}"
        run: |
          # 1. Gather info from this run's successful builds.
          NEW_BOARDS=$(find artifacts/matrix-info* -name "*.txt" -print0 | xargs -0 cat | cut -d',' -f1 | sort -u)
          NEW_BRANCHES=$(find artifacts/matrix-info* -name "*.txt" -print0 | xargs -0 cat | cut -d',' -f2 | sort -u)
          NEW_RELEASES=$(find artifacts/matrix-info* -name "*.txt" -print0 | xargs -0 cat | cut -d',' -f3 | sort -u)
          NEW_DESKTOPS=$(find artifacts/matrix-info* -name "*.txt" -print0 | xargs -0 cat | cut -d',' -f4 | sort -u)

          # 2. Try to fetch the old release body.
          OLD_BODY=""
          if gh release view "${VERSION}" --json body --jq '.body' > old_body.md; then
            echo "--- Found existing release, fetching old body ---"
            OLD_BODY=$(cat old_body.md)
          else
            echo "--- No existing release found, creating new one ---"
          fi

          # 3. Parse the OLD body using reliable HTML comment markers.
          #    This regex now correctly captures everything between the marker and the closing '-->'.
          OLD_BOARDS=$(echo "$OLD_BODY" | grep -oP '<!-- BOARDS_LIST: \K.*?(?= -->)' | tr ',' '\n' || echo "")
          OLD_BRANCHES=$(echo "$OLD_BODY" | grep -oP '<!-- KERNELS_LIST: \K.*?(?= -->)' | tr ',' '\n' || echo "")
          OLD_RELEASES=$(echo "$OLD_BODY" | grep -oP '<!-- RELEASES_LIST: \K.*?(?= -->)' | tr ',' '\n' || echo "")
          OLD_DESKTOPS=$(echo "$OLD_BODY" | grep -oP '<!-- DESKTOPS_LIST: \K.*?(?= -->)' | tr ',' '\n' || echo "")

          # 4. A simplified helper function to merge and sort (already newline-separated)
          function merge_and_sort {
            (
              echo "$1"
              echo "$2"
            ) | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep . | sort -u
          }

          # 5. Merge old and new info, then format for display at the end
          # The result of merge_and_sort is a multi-line string
          MERGED_BOARDS_LIST=$(merge_and_sort "${NEW_BOARDS}" "${OLD_BOARDS}")
          MERGED_BRANCHES_LIST=$(merge_and_sort "${NEW_BRANCHES}" "${OLD_BRANCHES}")
          MERGED_RELEASES_LIST=$(merge_and_sort "${NEW_RELEASES}" "${OLD_RELEASES}")
          MERGED_DESKTOPS_LIST=$(merge_and_sort "${NEW_DESKTOPS}" "${OLD_DESKTOPS}")

          # Now, create the final display string with ", " separator
          BUILT_BOARDS=$(echo "${MERGED_BOARDS_LIST}" | paste -sd ', ' -)
          BUILT_BRANCHES=$(echo "${MERGED_BRANCHES_LIST}" | paste -sd ', ' -)
          BUILT_RELEASES=$(echo "${MERGED_RELEASES_LIST}" | paste -sd ', ' -)
          BUILT_DESKTOPS=$(echo "${MERGED_DESKTOPS_LIST}" | paste -sd ', ' -)
          
          echo "--- Merged Info ---"
          echo "Boards: ${BUILT_BOARDS}"
          echo "Kernel: ${BUILT_BRANCHES}"
          echo "Releases: ${BUILT_RELEASES}"
          echo "Desktop: ${BUILT_DESKTOPS}"
          echo "-------------------------"

          # 6. Generate the final HTML body using a Heredoc to define the template variable.
          BODY_TEMPLATE=$(cat <<'EOM')
            <p align='center'>
            <a href='https://www.armbian.com'>
            <img src='https://github.com/armbian/build/blob/main/.github/armbian-logo.png?raw=true' width='150'></a></p>
            <h1 align=center>Armbian OS</h1>
            <p align=center>
            <a href='https://www.armbian.com'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            <a href='https://www.armbian.com'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
            </p>
            <br>

            - **Board**: BUILT_BOARDS_PLACEHOLDER
            - **Kernel**: BUILT_BRANCHES_PLACEHOLDER
            - **Desktop**: BUILT_DESKTOPS_PLACEHOLDER
            - **Releases**: BUILT_RELEASES_PLACEHOLDER
            - **Build Type**: ${{ needs.Prepare_Build.outputs.NIGHTLY == 'yes' && 'Nightly' || 'Stable' }}
            - **Verification**: sha256sum and GPG signature

            <!-- BOARDS_LIST: BUILT_BOARDS_PLACEHOLDER -->
            <!-- KERNELS_LIST: BUILT_BRANCHES_PLACEHOLDER -->
            <!-- DESKTOPS_LIST: BUILT_DESKTOPS_PLACEHOLDER -->
            <!-- RELEASES_LIST: BUILT_RELEASES_PLACEHOLDER -->

            <br>
            Please note that Armbian Rolling Releases are not recommended for production environments, as these builds are not thoroughly tested. However, in most cases, they should work well. 

            <br>
             
            </p>
          EOM

          # 7. Replace placeholders with actual data. Using a temporary variable for clarity.
          BODY_CONTENT="${BODY_TEMPLATE}"
          BODY_CONTENT=$(echo "${BODY_CONTENT}" | sed "s/BUILT_BOARDS_PLACEHOLDER/${BUILT_BOARDS}/g")
          BODY_CONTENT=$(echo "${BODY_CONTENT}" | sed "s/BUILT_BRANCHES_PLACEHOLDER/${BUILT_BRANCHES}/g")
          BODY_CONTENT=$(echo "${BODY_CONTENT}" | sed "s/BUILT_DESKTOPS_PLACEHOLDER/${BUILT_DESKTOPS}/g")
          BODY_CONTENT=$(echo "${BODY_CONTENT}" | sed "s/BUILT_RELEASES_PLACEHOLDER/${BUILT_RELEASES}/g")

          echo "${BODY_CONTENT}" > body.html

          echo "--- Generated body.html ---"
          cat body.html

      - name: "Delete conflicting assets from existing release"
        continue-on-error: true
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: "Armbian_V${{ needs.Prepare_Build.outputs.VERSION }}"
        run: |
          set -e 
          
          echo "Finding local artifacts to upload..."
          mapfile -t local_files < <(find artifacts -type f -path '*/armbian-image*/*' -o -type f -path '*/kernel-debs-*/*' | sed 's#.*/##')
          if [ ${#local_files[@]} -eq 0 ]; then
            echo "Warning: No local files found to upload."
          fi
    
          echo "Fetching existing assets for release ${RELEASE_TAG}..."
          mapfile -t remote_assets < <(gh release view "${RELEASE_TAG}" --json assets --jq '.assets[].name' || echo "")
          if [ $? -ne 0 ] || [ ${#remote_assets[@]} -eq 0 ]; then
            echo "No existing release or no assets found. Nothing to delete."
            exit 0 
          fi
    
          echo "Comparing local and remote files to find conflicts..."
          for file in "${local_files[@]}"; do
            for asset in "${remote_assets[@]}"; do
              if [[ "$file" == "$asset" ]]; then
                echo "Conflict found. Deleting existing asset: ${asset}..."
                gh release delete-asset "${RELEASE_TAG}" "${asset}" --yes
                break 
              fi
            done
          done
          echo "Finished deleting conflicting assets."

      - name: "Publish to GitHub Release"
        uses: ncipollo/release-action@v1
        if: success()
        with:
          tag: "Armbian_V${{ needs.Prepare_Build.outputs.VERSION }}"
          name: "Armbian_V${{ needs.Prepare_Build.outputs.VERSION }}"
          artifacts: |
            artifacts/armbian-image*/**/*
            artifacts/kernel-debs-*/linux-*.deb
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: false 
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "body.html"

  # ====================================================================
  # JOB 4: Update APT Repository
  # ====================================================================
  Update_APT_Repo:
    name: "Update APT Repository"
    runs-on: ubuntu-latest
    needs: [Publish_Release]
    if: success()
    env:
      # Expose GPG Key ID for the reprepro script to use for signing.
      GPG_KEY_ID: ${{ secrets.GPG_SIGNING_KEY_ID }}

    steps:
      - name: "Download all kernel DEB packages"
        uses: actions/download-artifact@v4
        with:
          pattern: kernel-debs-*
          path: artifacts/debs

      - name: "Download MonitorPanel DEB fpackages"
        uses: dsaltares/fetch-gh-release-asset@1.1.0
        continue-on-error: true
        with:
          repo: 'YANXIAOXIH/MonitorPanel'
          version: 'latest'    
          file: 'monitorpanel-.*_arm64.deb'
          target: 'artifacts/debs/monitorpanel/monitorpanel.deb' 

      - name: "Import GPG Key"
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: "Install APT repository tools"
        run: sudo apt-get update && sudo apt-get install -y reprepro

      - name: "Setup APT Repository Structure"
        shell: bash
        run: |
          # Dynamically create the 'distributions' config file for reprepro.
          mkdir -p repo/conf
          > repo/conf/distributions
          
          # The repo components are derived from the kernel artifact names (e.g., lemonpi-edge).
          COMPONENTS="main"
          for dir in artifacts/debs/kernel-debs-*/; do
            variant=$(basename "$dir" | sed 's/kernel-debs-//')
            COMPONENTS="${COMPONENTS} ${variant}"
          done
          
          for codename in $RELEASE; do
            echo "Generating config for $codename with components:${COMPONENTS}"
            cat <<EOF >> repo/conf/distributions
          Origin: Armbian
          Label: Armbian
          Codename: ${codename}
          Architectures: arm64
          Components: ${COMPONENTS}
          Description: Custom APT repository for Armbian
          SignWith: ${{ env.GPG_KEY_ID }}

          EOF
          done
          echo "--- Final distributions config ---"
          cat repo/conf/distributions

      - name: "Add all DEB packages to each distribution"
        shell: bash
        run: |
          # Use reprepro to add all built .deb packages to the repository.
          for deb_dir in artifacts/debs/kernel-debs-*/; do
            component=$(basename "$deb_dir" | sed 's/kernel-debs-//')
            echo "--- Processing packages from ${deb_dir} for component: ${component} ---"
            for codename in $RELEASE; do
              echo "Adding packages to distribution '${codename}' component '${component}'"
              reprepro -b repo/ -V --ignore=wrongdistribution -C ${component} includedeb ${codename} ${deb_dir}/*.deb
              if [ $? -ne 0 ]; then
                  echo "::error::reprepro failed for ${codename}/${component} with packages from ${deb_dir}"
                  exit 1
              fi
            done
          done

      - name: "Add MonitorPanel DEB package to 'main' component"
        shell: bash
        run: |
          MONITOR_DEB_FILE="artifacts/debs/monitorpanel/monitorpanel.deb"

          if [ -s "$MONITOR_DEB_FILE" ]; then
            echo "--- Processing MonitorPanel package ---"
            for codename in $RELEASE; do
              echo "Adding MonitorPanel to distribution '${codename}' component 'main'"
              reprepro -b repo/ -V -C main includedeb ${codename} "$MONITOR_DEB_FILE"
              if [ $? -ne 0 ]; then
                  echo "::error::reprepro failed for ${codename}/main with MonitorPanel package"
                  exit 1
              fi
            done
          else
            echo "::warning::MonitorPanel DEB package not found or empty, skipping."
          fi

      - name: "Deploy repository to GitHub Pages"
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          publish_branch: apt-repo
          force_orphan: true
          
